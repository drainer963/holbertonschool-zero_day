!function(n){var e={};function r(o){if(e[o])return e[o].exports;var t=e[o]={i:o,l:!1,exports:{}};return n[o].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=n,r.c=e,r.d=function(n,e,o){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var t in n)r.d(o,t,function(e){return n[e]}.bind(null,t));return o},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="/webpack/",r(r.s=843)}({0:function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},340:function(n,e,r){"use strict";r(0)(r(341))},341:function(n,e){n.exports="spweb.fb = (function ($, user, config) {\n  /**\n   * Simple wrapper for the Facebook JS SDK.\n   * @module spweb/fb\n   * @requires jQuery\n   * @requires spweb.user\n   * @requires spweb.config\n   */\n\n  'use strict';\n\n  var exports = {\n    fbStatus: {\n      DISCONNECTED: 'disconnected',\n      CONNECTED: 'connected',\n      NOT_AUTHORIZED: 'not-authorized',\n      ERROR: 'error'\n    },\n\n    defaults: {\n      appId: config.facebook.appId,\n      cookie: true,\n      status: true,\n      xfbml: true,\n      oauth: true,\n      version: config.facebook.version\n    },\n\n    /**\n     * Reference to FB API object\n     *\n     * @type {Object}\n     */\n\n    api: null,\n\n    /**\n     * Initializes FB JavaScript SDK.\n     *\n     * @param {Object} options Option object for FB JavaScript SDK.\n     *\n     *  {Number} options.appId FB app Id.\n     *  {Boolean} options.music true to enable Music Bridge support.\n     *  {Boolean} options.cookie true to enable cookie support.\n     *  {Boolean} options.status true to fetch fresh status.\n     *  {Boolean} options.xfbml true to parse XFBML tags.\n     *  @see https://developers.facebook.com/docs/reference/javascript/FB.init/\n     *\n     * @param {Function} callback Callback function to execute after SDK is initialized.\n     * @param {Function} errback Callback function to execute when there's a connection issue.\n     */\n\n    _initFacebookAPI: function(options, callback, errback) {\n      this.api = window.FB;\n      var opts = $.extend({}, this.defaults, options );\n\n      this.api.init(opts);\n\n      /* Veryfing the connection */\n      this._verifyConnection(callback, errback);\n      $.publish('fb_init');\n    },\n\n    /**\n     * Wraps FB API login status method\n     *\n     * @param {Function} callback Connection authorized callback.\n     * @param {Function} errback Connection not authorized callback.\n     */\n\n    _verifyConnection: function(callback, errback) {\n      var self = this;\n      this.api.getLoginStatus(function(response) {\n        self._checkFbLoginResponse(response, callback, errback);\n      }, false);\n    },\n\n    _checkFbLoginResponse: function(response, callback, errback) {\n      switch (response.status) {\n\n        /* user logged in and app permissions are granted */\n        case 'connected':\n\n          this.status = this.fbStatus.CONNECTED;\n          if (callback) {\n            callback(response);\n          }\n          break;\n\n          // user logged in, no permisions granted\n        case 'not_authorized':\n          this.status = this.fbStatus.NOT_AUTHORIZED;\n          if (errback) {\n            errback(response);\n          }\n          break;\n\n          //  user isn't logged in to Facebook.\n        default:\n          this.status = this.fbStatus.DISCONNECTED;\n          if (errback) {\n            errback(response);\n          }\n      }\n    },\n\n    _loadFacebookScript: function(){\n      if (!window.spyASL) {\n        window.spyASL = function(src) {\n          setTimeout(function() {\n            var s = document.createElement('script');\n            s.type = 'text/javascript'; s.async = true; s.src = src;\n            document.getElementsByTagName('head')[0].appendChild(s);\n          }, 1);\n        };\n      }\n      if (!window.FB) {\n        window.spyASL('//connect.facebook.net/' + spweb.config.facebook.locale + '/sdk.js');\n      }\n    },\n\n    connect: function(callback) {\n\n      // We will use the same callback for error and success states\n      var errback = callback;\n      var self = this;\n      if (!this.api) {\n        window.fbAsyncInit = function() {\n          self._initFacebookAPI({}, callback, errback);\n        };\n        this._loadFacebookScript();\n      } else {\n        /* API is loaded but verify connection nonethless */\n        this._verifyConnection(callback, errback);\n      }\n\n    },\n\n    /**\n     * @see http://developers.facebook.com/docs/howtos/login/getting-started/#step4\n     */\n\n    login: function(callback, errback, scope) {\n      var self = this;\n      if (!self.api) {\n        self._initFacebookAPI();\n        return;\n      }\n\n      self.api.login(function(response) {\n        self._checkFbLoginResponse(response, callback, errback);\n      }, scope);\n    }\n  };\n\n  return exports;\n\n}(jQuery, spweb.user, spweb.config));\n"},843:function(n,e,r){r(340),r(844),n.exports=r(846)},844:function(n,e,r){"use strict";r(0)(r(845))},845:function(n,e){n.exports="spweb.register = (function($, Form, user, config, analytics) {\n\n  /**\n   * Behavior layer for the registration form\n   * @module spweb/register\n   * @requires jQuery\n   * @requires spweb.Form\n   * @requires spweb.user\n   * @requires spweb.fb\n   * @requires spweb.config\n   */\n\n  'use strict';\n\n  var _formEmail,\n    _formFacebook,\n    _formCode,\n    _onAjaxSubmitSuccess,\n    _signupWithFacebook,\n    _getSubmitSuccessDeferreds,\n    _options,\n    _validateNoWhitespace,\n    _addNoWhitespaceValidation,\n    _validateNoForbiddenCharacters,\n    _addForbiddenCharactersValidation,\n    _addUsernameValidation,\n    _addDOBValidation,\n    _setupFacebookForm,\n    _setupEmailForm,\n\n    /**\n     * @private\n     * Method to check if the token has been generated yet.\n     */\n    _pollTokenService,\n\n    exports = {};\n\n  _onAjaxSubmitSuccess = function(data, source) {\n    if (typeof data !== 'object') {\n      _formEmail.showGeneralError();\n      return;\n    }\n\n    if (data.status !== 201 && data.status !== 200) {\n      if (source === 'facebook') {\n        _formFacebook.showGeneralError(data.message);\n      } else {\n\n        // show a specific error message for differant types of errors (username, email, etc...)\n        if (data.hasOwnProperty('errors')) {\n          var errors = {};\n\n          data.errors.forEach(function(error) {\n            // if we recevied a birthdate error from the backend we correctly display on the front-end fields\n            if (error.field === 'birthdate') {\n              errors['dob_day'] = error.translatedMessage;\n              errors['dob_month'] = error.translatedMessage;\n              errors['dob_year'] = error.translatedMessage;\n            }\n          });\n\n          _formEmail.validator.showErrors(errors);\n\n          _formEmail.scrollToFirstError();\n        } else {\n          // show a general error message if no specific errors exist\n          _formEmail.showGeneralError(data.error.msg);\n        }\n\n      }\n\n      return;\n    }\n\n    if (data.new_account) {\n      $.publish('registration_success');\n\n      if (source === 'facebook') {\n        $.publish('login_facebook_success');\n      } else {\n        $('#register-button-email-submit').attr('disabled', 'disabled');\n        $.publish('login_username_success');\n      }\n    }\n\n    var forwardUrl = data.final_redirect_url;\n    var deferreds = _getSubmitSuccessDeferreds(data);\n\n\n    if (deferreds.length > 0) {\n      $.when.apply($, deferreds).always(function(){\n        window.location = forwardUrl;\n      });\n      return;\n    }\n\n    window.location = forwardUrl;\n  };\n\n  _getSubmitSuccessDeferreds = function (data) {\n    var deferreds = [];\n\n    // Request the referral campaign callback if it exists (i.e. Bigpoint)\n    // Make sure it loads before redirecting.\n    // This callback is currently implemented separately on the download page.\n    if (data.callback_url) {\n      var campaignDfd = new jQuery.Deferred();\n      deferreds.push(campaignDfd);\n      // Campaign callback might not reply with CORS headers - load in iframe instead of XHR\n      $('<iframe height=\"0\" width=\"0\" style=\"display: none; visibility: hidden\"></iframe>')\n        .attr('src', data.callback_url)\n        .appendTo('body')\n        .load(function () {\n          campaignDfd.resolve();\n        });\n      // Don't wait forever\n      setTimeout(function () {\n        campaignDfd.reject();\n      }, 5000);\n    }\n\n    return deferreds;\n  };\n\n  /**\n   * Checks if user2 has generated a token for the user\n   * @private\n   * @param {Object} deferred jQuery Deferred Object\n   * @param {Int} [count] internal counter of loop we are on\n   * @param {Int} [interval] milliseconds between loops\n   * @returns {Object}\n   */\n  _pollTokenService = function (deferred, count, interval) {\n    interval = interval || 0;\n    count = (!isNaN(count)) ? count : 5;\n\n    if (count < 1) {\n      return deferred.resolve();\n    }\n\n    setTimeout(function() {\n      $.ajax({\n        type: 'POST',\n        dataType: 'json',\n        url: '/' + user.getMarket() + '/xhr/json/token.php',\n        xhrFields: {\n          withCredentials: true\n        },\n        success: function(data) {\n          if (typeof data !== 'object') {\n            return deferred.resolve();\n          }\n\n          if (data.status === 1) {\n            return deferred.resolve();\n          }\n\n          count -= 1;\n          _pollTokenService(deferred, count, 500);\n        }\n      });\n    }, interval);\n  };\n\n  _signupWithFacebook = function() {\n    _formFacebook.showAjaxSpinner();\n    FB.login(function(response) {\n      FB.api('/me', function(meResponse) {\n        if (!meResponse || meResponse.error) {\n          _formFacebook.hideAjaxSpinner();\n          _formFacebook.showGeneralError();\n          return;\n        }\n        var displayname = '';\n        if (meResponse && meResponse.name) {\n          displayname = meResponse.name;\n        }\n\n        var postData = {\n          'fb': response.authResponse.accessToken,\n          'id': response.authResponse.userID,\n          'name': displayname,\n          'email': meResponse.email,\n          'creation_flow': _formFacebook.form.find('input[name=\"signup_facebook_form[creation_flow]\"]').val(),\n          'forward_url_parameter': _formFacebook.form.find('input[name=\"signup_facebook_form[forward_url_parameter]\"]').val(),\n          'terms': 'true', // _formFacebook enforces T&C acceptance\n          'sp_csrf': _formFacebook.form.find('input[name=\"signup_facebook_form[sp_csrf]\"]').val()\n        };\n\n        postData['data_source'] = 'www';\n\n        $.ajax({\n          type: 'POST',\n          dataType: 'json',\n          url: '/' + user.getMarket() + '/xhr/json/sign-up-for-spotify-fb.php',\n          xhrFields: {withCredentials: true},\n          data: postData,\n          success: function(data) {\n            _formFacebook.hideAjaxSpinner();\n            // Defensive redirect in the event that user2 is not aware of the current\n            // user's access token yet (i.e., lag)\n            if (typeof data === 'object' && data.status === 130 && typeof data.redirect === 'string') {\n              window.location = data.redirect;\n              return;\n            }\n            if (typeof data === 'object' && (data.status === 201 || data.status === 200)) {\n              $.publish('form_success.' + _formFacebook.form.attr('id'), data);\n            } else if (typeof data === 'object' && data.status === 60) { // 60 === SignupService::ERROR_EMAIL_ALREADY_EXISTS\n              _formFacebook.showGeneralError(data.message);\n            } else {\n              _formFacebook.showGeneralError();\n            }\n          },\n          error: function() {\n            _formFacebook.hideAjaxSpinner();\n            _formFacebook.showGeneralError();\n          }\n        });\n      });\n    }, {scope: config.facebook.scopes});\n  };\n\n  /**\n  * Checks to see if String value has whitespace.\n  */\n  _validateNoWhitespace = function (value) {\n    return !/\\s/g.test(value);\n  };\n\n  /**\n  * Checks to see if String value matches regular expression.\n  */\n  _validateNoForbiddenCharacters = function (rule, value) {\n    var regex = new RegExp(rule, 'i');\n    return !regex.test(value);\n  };\n\n  /**\n  * Extends the jquery validator plugin to implement new rule that does not allow forbidden characters determined by regex rule.\n  */\n  _addForbiddenCharactersValidation = function () {\n    $.validator.addMethod('forbiddenchars', function(value, element, params) {\n      return _validateNoForbiddenCharacters(params, value);\n    });\n  };\n\n  /**\n  * Extends the jquery validator plugin to implement new rule that does not allow whitespaces.\n  */\n  _addNoWhitespaceValidation = function () {\n    $.validator.addMethod('nowhitespace', function(value, element) {\n      return _validateNoWhitespace(value);\n    });\n  };\n\n  _addUsernameValidation = function() {\n    var $username = $('#register-username');\n\n    $.extend(_options, {\n      groups: {\n        dob: 'dob_month dob_day dob_year'\n      },\n      rules: {\n        \"signup_form[email]\": {\n          email: true,\n          remote: {\n            param: {\n              url: \"/\" + spweb.user.getMarket() + \"/xhr/json/isEmailAvailable.php\",\n              type: \"get\",\n              data: {\n                email: function () {\n                  return $('#register-email').val();\n                }\n              }\n            }\n          }\n        },\n\n        // Overrides username remote availability check to depend on the username not having any whitespaces.\n        username : {\n          remote: {\n            param: {\n              url: $username.data('rule-remote'),\n              type: 'GET',\n              data: {\n                'username': function() {\n                  return $username.val();\n                }\n              }\n            },\n            depends: function(element) {\n              var $element = $(element),\n                  elementValue = $element.val();\n              return _validateNoWhitespace(elementValue) && _validateNoForbiddenCharacters($element.data('rule-forbiddenchars'), elementValue);\n            }\n          }\n        }\n      },\n      errorPlacement: function(error, element) {\n        error.appendTo(element.closest('li')); //@TODO: Ideally, this isn't tied to the markup.\n      }\n    });\n  };\n\n  _addDOBValidation = function() {\n    // An experiment uses an input field rather than a select.\n    // So we conditionally check for that and add a handler to prepend\n    // numbers with 0 so things look nice.\n    var $dobMonth = $('#register-dob-month');\n    if ($dobMonth.length && $dobMonth.is('input[type=number]')) {\n      // We'll do the same to the day of the month for this experiment\n      var $dobDay = $('#register-dob-day');\n\n      // Define the prepend function\n      var prependZeros = function(element) {\n        return function () {\n          var $el = $(element);\n          if ($el.val()) {\n            var num = parseInt($el.val(), 10);\n            if (num > 0) {\n              $el.val(('00' + num).slice(-2));\n            }\n          }\n        };\n      };\n\n      $dobMonth.on('blur', prependZeros($dobMonth.get()));\n      $dobDay.on('blur', prependZeros($dobDay.get()));\n    }\n  };\n\n  _setupFacebookForm = function() {\n    var registerFbElement = $('#js-register-with-facebook');\n    if (registerFbElement.length > 0) {\n      _formFacebook = new Form(registerFbElement);\n      $.subscribe('form_success.' + _formFacebook.form.attr('id'), function(e, data) {\n        _onAjaxSubmitSuccess(data, 'facebook');\n      });\n      $.subscribe('form_error.' + _formFacebook.form.attr('id'), function() {\n        _formFacebook.showGeneralError();\n      });\n      _formFacebook.init({\n        submitHandler: _signupWithFacebook,\n        errorClass: 'has-error',\n        errorPlacement: function(error, element) {\n          error.appendTo(element.closest('li')); //@TODO: Ideally, this isn't tied to the markup.\n        }\n      });\n    }\n\n    $('.js-signup-fb').bind('click.signUp', function(ev){\n      ev.preventDefault();\n      ev.stopPropagation();\n      _formFacebook.form.submit();\n    });\n  };\n\n  _setupEmailForm = function() {\n    var registerEmailElement = $('#js-register-with-email');\n    if (registerEmailElement.length > 0 ) {\n      _formEmail = new Form($('#js-register-with-email'));\n      _options = {};\n\n      // Extend validation plugin with new no whitespace rule\n      _addNoWhitespaceValidation();\n      _addForbiddenCharactersValidation();\n      _addUsernameValidation();\n      _addDOBValidation();\n\n      _formEmail.init(_options);\n\n      $('.js-signup-email-submit').bind('click', function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        _formEmail.form.submit();\n      });\n\n      $.subscribe('form_success.' + _formEmail.form.attr('id'), function(e, data) {\n        // Defensive redirect in the event that user2 is not aware of the current\n        // user's access token yet (i.e., lag)\n        if (typeof data === 'object' && data.status === 130 && typeof data.redirect === 'string') {\n          window.location = data.redirect;\n          return;\n        }\n        _onAjaxSubmitSuccess(data, 'email');\n      });\n      $.subscribe('form_error.' + _formEmail.form.attr('id'), function() {\n        _formEmail.showGeneralError();\n      });\n    }\n  };\n\n  /**\n   * Attach validation to the form. Single-run function.\n   */\n  exports.init = function(){\n    _setupFacebookForm();\n    _setupEmailForm();\n\n    this.init = Function(''); // Run once; don't create a closure.\n  };\n\n  return exports;\n}(jQuery, spweb.Form, spweb.user, spweb.config, spweb.analytics));\n"},846:function(n,e,r){"use strict";r(0)(r(847))},847:function(n,e){n.exports="var spweb = spweb || {};\nspweb.login = (function($, Form, fb, user, detect, cookie, config, utils){\n  /**\n   * Behavior layer for the login form\n   * @module spweb/login\n   * @requires jQuery\n   * @requires spweb.Form\n   * @requires spweb.fb\n   * @requires spweb.user\n   * @requires spweb.detect\n   * @requires spweb.cookie\n   * @requires spweb.config\n   */\n\n  var _formEmail,\n    _formFacebook,\n    _onAjaxSubmitSuccess,\n    _forwardUrl,\n    exports = {};\n\n  _onAjaxSubmitSuccess = function(data) {\n\n    if (typeof data !== 'object') {\n      _formEmail.showGeneralError();\n      return;\n    } else if (data.msg !== '') {\n      _formEmail.showGeneralError(data.msg);\n      return;\n    } else if (data.error) {\n      _formEmail.showGeneralError(data.error);\n      return;\n    }\n\n    $.publish('login_username_success');\n\n    window.location.href = 'oauth_redirect' in data ? data.oauth_redirect : spweb.login.getForwardUrl();\n  };\n\n  /**\n   * Attach validation to the form. Single-run function.\n   */\n  exports.init = function() {\n    _forwardUrl = $('#login-forward-url').val();\n\n    spweb.fb.connect();\n\n    _formFacebook = new Form($('#js-login-form-facebook'));\n    _formFacebook.init();\n\n    _formEmail = new Form($('#js-login-form-email'));\n    $.subscribe('form_success.' + _formEmail.form.attr('id'), function(e, data) {\n      _onAjaxSubmitSuccess(data);\n    });\n    $.subscribe('form_error.' + _formEmail.form.attr('id'), function(e) {\n      _formEmail.showGeneralError();\n    });\n    _formEmail.init();\n\n    var prefillUsername = spweb.utils.getQueryParameter('prefill-username');\n    if (prefillUsername && prefillUsername.length && isNaN(prefillUsername)) {\n      _formEmail.form.find('#login-username').val(prefillUsername);\n    }\n\n    $('.js-facebook-login').bind('click.signUp', function(ev){\n      ev.preventDefault();\n\n      _formFacebook.showAjaxSpinner();\n      spweb.fb.login(\n        function(response) {\n          window.location.href = '/' + user.getMarket() + '/login/fb/?forward_url=' + encodeURIComponent(_forwardUrl);\n        },\n        function() {\n          _formFacebook.hideAjaxSpinner();\n          _formFacebook.showGeneralError();\n        },\n        {scope: config.facebook.scopes}\n      );\n    });\n\n    this.init = Function(''); // Run once; don't create a closure.\n  };\n\n  /**\n   * Retrieve the forward url\n   * @returns {String} forward url\n   */\n  exports.getForwardUrl = function() {\n    return _forwardUrl;\n  };\n\n  return exports;\n\n}(jQuery, spweb.Form, spweb.fb, spweb.user, spweb.detect, spweb.cookie, spweb.config, spweb.utils));\n"}});
//# sourceMappingURL=signup.f04328effe7a89a998cb.js.map